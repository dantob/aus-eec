0000 |################################################################################
   1 |# 0000-00FF 8061 Internal Registers (256 Bytes)
   1 |################################################################################
   1 |
   1 |#ADDR	Size	Read				Size	Write
   1 |#-------------------------------------------------------------------------------
   1 |#0000	B/W	Zero
0001 |#0001	B/W	Zero
0002 |#0002	B	LSO port (Non-bidirectional)	B	LSO port (Non-bidirectional)
0003 |#0003	B	Bidirectional I/O port			B	Bidirectional I/O port
0004 |#0004	B	A/D Result Lo					B	A/D command (Channel #)
0005 |#0005	B	A/D Result Hi					B	Watchdog timer
0006 |#0006	W	Master I/O timer 
0008 |#0008	B	Interrupt mask					B	Interrupt mask
0009 |#0009	B	Interrupt pending				B	Interrupt pending
000A |#000A	B	I/O status						B	I/O status
000B |#000B	B	HSI sample register
000C |#000C	B	HSI data mask					B	HSI data mask
000D |#000D	B	HSI data hold					B	HSO command hold
000E |#000E	W	HSI time hold					W	HSO time hold
0010 |#0010	B/W	Stack Pointer Lo byte			B/W	Stack Pointer Lo byte
0011 |#0011	B/W	Stack Pointer Hi byte			B/W	Stack Pointer Hi byte
0012 |#0012	B/W General purpose registers		B/W General purpose registers
00FF |#00FF	B/W General purpose registers		B/W General purpose registers

1FFF |
   1 |################################################################################
   1 |# 2000-2003 reset entry point
   1 |################################################################################

2003 |
   1 |################################################################################
2004  #usually zero
2006  #unknown; same value as A9L
2008  #unknown; same value as A9L
200A  #checksum?
200C  #same value as A9L
200E  #calibration console, same value as A9L

200F |
   1 |################################################################################
   1 |# 2010-201F Interrupt Vectors
   1 |################################################################################

201E |
   1 |################################################################################

2021 |
   1 |################################################################################
   1 |# 2022-2031 Calibration Pointers
   1 |################################################################################

2031 |
   1 |################################################################################

20A1 |
   1 |################################################################################
   1 |# Reset:
   1 |# 1: clear memory from 0012 - 02A0, SP is temporarily used, ends up back at 02A2 when done
   1 |#    note that we did not clear 02A2 which holds our return address (top of stack)
   1 |# 2: load initial memory state from ROM
   1 |
   1 |#R2A - is VIP_mode_flag (Vehicle Interface Port / DLC control)
   1 |################################################################################
20A2  #disable interupts, (they were already disabled, seems redundant?)
20A4  #all HSI inputs disabled
20A6  #temporarily point the SP at 0012; we are going to use it to clear memory
20AA  #clear current memory location and increment SP
20AD  #inc WD timer
20AF  #if VIP_mode_flag (NO_START_TESTS) is set (KOEO)
20B2  #and/or if VIP_mode_flag (RUNNING_TESTS) is set (KOER)
20B5  #and sp points at = R2A (VIP_mode_flag)
20B9  #
20BB  #inc SP and skip clearing VIP_mode_flag
20BD  #inc WD timer
20C3  #if SP less than 02A0, not finished clearing memory, else done
   1 |#-------------------------------------------------------------------------------
20C5  #R14 points to first init table in rom
20C9  #if R14 points to FFFF (no more table to process, break)
20CD  #
20CF  #R1A is RAM offset high byte (0000), low byte is overwritten
20D2  #R16 is 6A90, last entry in table (contains address of next table)
20D5  #
20D8  #while we are not passed the end of table
20DA  #pointer to next byte in list
20DD  #store the bytes value into R1C, this value will be RAM location low byte
20E0  #the next byte is the data, or it with current value (but we've just cleared mem so should have no effect?)
20E3  #store the value (2nd byte) into the register (1st byte)
20E6  #contine until end of list
20E8  #R1C should never be larger than R14, oops.
20EA  #R14 now points at next table in ROM
20ED  #continue til we've processed all init tables


219D |
   1 |################################################################################
   1 |#Init: we jump here from 2000 after disabling interrupts
   1 |#R2A - is VIP_mode_flag (Vehicle Interface Port / DLC control)
   1 |################################################################################
219E  #clear the VIP_mode_flag; all bits
21A0  #initialise stack pointer at 02A2, stack grows downwards
21A4  #save return address to stack; interrupts enabled before returning

21A5 |
   1 |################################################################################
   1 |#EEC_main_loop: cycles through routines, should never terminate
   1 |#R94 - is current routine offset, will be 0 first time through
   1 |#R72 - is current RAM address pointer
   1 |#R30 - is the calculated next routine address
   1 |################################################################################
21A6  #loop sanity check
21A9  #21D6 + offset 7C equals 2252; we are out of array bounds, goto HANG
21AB  #R30 = copy of current routine offset
21AE  #R30 = array start address + current routine offset
21B2  #save EEC_main_loop address to stack
21B5  #save calculated subroutine address to stack
21B7  #reset RAM pointer after every function call; 0180 start of RAM
21BB  #increment to next routine offset address (ready for next loop)
21BE  #jump to calculated subroutine address
21BF  #infinite loop for watchdog (we crashed!)

21C0 |
   1 |################################################################################
   1 |#main_loop_selection: update run-mode loop selection and restart from beginning
   1 |#possible run modes are NORMAL NO_START_TESTS(KOEO) RUNNING_TESTS(KOER)
   1 |#R2A - is VIP_mode_flag (Vehicle Interface Port / DLC control)
   1 |#R94 - is current routine offset
   1 |################################################################################
21C1  #if VIP_mode_flag (NO_START_TESTS) is set (KOEO); else break
21C4  #if VIP_mode_flag (VEHICLE_SPEED_CONTROL_TESTS) (cruise) not set; break
21C7  #set routine to loop B (2212; on-demand KOEO self tests)
21CA  #return to EEC_main_loop
21CB  #if VIP_mode_flag (RUNNING_TESTS) not set (KOER); break
21CE  #set routine to loop C (222E; on-demand KOER self tests)
21D1  #return to EEC_main_loop
21D2  #set routine to loop A (21D6; normal operation)
21D5  #return to EEC_main_loop

21D5 |
   1 |################################################################################
   1 |#EEC main loop A (normal operation)
   1 |################################################################################
2210  #update main loop selection and restart

2211 |
   1 |################################################################################
   1 |#EEC main loop B (on-demand KOEO self tests; NO_START_TESTS, VEHICLE_SPEED_CONTROL_TESTS)
   1 |################################################################################
222C  #update main loop selection and restart

222D |
   1 |################################################################################
   1 |#EEC main loop C (on-demand KOER self tests; RUNNING_TESTS)
   1 |################################################################################
2250  #update main loop selection and restart

2251 |
   1 |################################################################################

3E26 |
   1 |#starting at 3E27 is choosing fueling table(s)

4A26 |
   1 |#Starting at 4A58 is choosing spark table(s)
4A5B  #Pointer to table
4A60  #RAE = engine RPM * 4
4A63  #2D interpolation routine (R32=Table,R34=InVar,R38=OutVar)
4A66  #Table column no. set based on RPM result
4A69  #Pointer to table
4A71  #2D interpolation routine (R32=Table,R34=InVar,R38=OutVar)
4A74  #Table row no. set based on MAP result

6A61 |
   1 |################################################################################
   1 |#init tables
   1 |#first word is high byte of memory offset to store data
   1 |#second word is pointer to end of table
   1 |#word at the end contains address of next table
   1 |#rest of the byte pairs are first byte = low byte memory offest
   1 |#                          second byte = data to store at memory location
   1 |################################################################################

6F4F |
6F4F |# Data -------------------------------------------------------------------------

7011 |#				??	Row
702D |#				??	Row
70ED |#				Seconds	 Row
7101 |#				??	Row
7121 |#				??	Row
7151 |#				??	 Row
7169 |#				??	Row
7185 |#				RPM	 Row
71A1 |#				Load %	 Row
71BD |#				Load %	 Row
71D9 |#				inHga	 Row
71F1 |#				??	Row

729F |# Values are a fraction of 100%; Columns=RPM(716A), Rows=MAP(7122)
7857 |# Columns=??(7102), Rows=??(7816)
79E7 |# Values are in lambda, multiply by 14.64 to get AFR; Columns=RPM(716A), Rows=Load%(71A2)
7A41 |# Values are in lambda, multiply by 14.64 to get AFR; Columns=Temp(7152), Rows=Load%(7186)
7A91 |# Values are negative lamba adder (richen mixture), multiply by 14.64 to get AFR; Columns=Temp(7152), Rows=Time(70D2)
7AFD |# Values are in lambda, multiply by 14.64 to get AFR; Columns=RPM(716A), Rows=Load%(7186)
7B49 |# Columns=??(70EE), Rows=??(7AFE)
7BB5 |# Values are degrees of ignition advance; Columns=RPM(716A), Rows=MAP(71BE)
7C21 |# Values are degrees of ignition advance; Columns=RPM(716A), Rows=MAP(71BE)
7C8D |# Values are degrees of ignition advance; Columns=RPM(716A), Rows=MAP(71BE)
7CF9 |# Values are degrees of ignition advance; Columns=RPM(716A), Rows=MAP(71BE)
7D65 |# Values are degrees of ignition advance; Columns=RPM(716A), Rows=MAP(71BE)
7FB4 |# Columns=RPM(716A), Rows=MAP(71BE)
8023 |# Values are degrees of ignition advance; Columns=RPM(716A), Rows=MAP(71BE)


